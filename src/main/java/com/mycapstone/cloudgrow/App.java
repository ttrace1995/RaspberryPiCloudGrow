/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycapstone.cloudgrow;

import com.google.gson.JsonSyntaxException;
import com.hopding.jrpicam.exceptions.FailedToRunRaspistillException;
import com.microsoft.azure.sdk.iot.device.DeviceClient;
import com.microsoft.azure.sdk.iot.device.IotHubEventCallback;
import com.microsoft.azure.sdk.iot.device.IotHubMessageResult;
import com.microsoft.azure.sdk.iot.device.IotHubStatusCode;
import com.microsoft.azure.sdk.iot.device.Message;
import com.microsoft.azure.sdk.iot.device.MessageCallback;
import com.microsoft.azure.sdk.iot.service.Device;
import com.microsoft.azure.sdk.iot.service.RegistryManager;
import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.URISyntaxException;


/**
 *
 * @author Tyler Tracey
 */
public class App {
    
    public static DeviceClient client = null;
    private static String devicePrimaryKey;
    private static String deviceConnectionString;
    
    
    private static class AppMessageCallback implements MessageCallback {
        @Override
        public IotHubMessageResult execute(Message msg, Object context) {
            
            String message = new String(msg.getBytes(), Message.DEFAULT_IOTHUB_MESSAGE_CHARSET);
            System.out.println("Received message from hub: "+ message);
            
            String key = Utilities.getMessageKey( message );
            String val = Utilities.getMessageValue( message );
            
            switch (key) {
                case "switch_command":
                     try {
                        Utilities.changeStateSettings(val);
                        CommandExecutor.executeStandardPythonCommand(val);
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        break;
                    
                case "take_photo":
                    try {
                        CommandExecutor.takePhoto();
                        uploadFile();
                    } catch (FailedToRunRaspistillException | IOException | InterruptedException ex) {
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                default:
                    break;
            }
            return IotHubMessageResult.COMPLETE;
        }
    }
    
    /*
    Define a callback method to print status codes from IoT Hub. If the upload was a success (OK_EMPTY),
    Then delete the file locally.
    */
    protected static class FileUploadStatusCallBack implements IotHubEventCallback {
        @Override
        public void execute(IotHubStatusCode status, Object context) {
            System.out.println("IoT Hub responded to file upload for theimage operation with status " + status.name());
            
            if (status.name().equals(Constants.OK_EMPTY)) {
                Utilities.deleteLocalImage();
            }
            else {
                Utilities.deleteLocalImage();
            }
        }
    }
    
     /*
    This method will attempt to create a new device on the IoT hub using the DEVICE_ID of the device.
    If the device is already present on the IoT hub, it returns the device connection string.
    If it is not present, it will create a new device on the IoT hub, and return its connection string.
    */
    private static void getCredentials() throws URISyntaxException {
        
        try {
            
            RegistryManager registryManager = RegistryManager.createFromConnectionString(Constants.IOTHUB_CONNECTION_STRING);
        
            // Create a device that's enabled by default, 
            // with an autogenerated key.
            Device device = Device.createFromId(Constants.DEVICE_ID, null, null);
  
            try {
                device = registryManager.getDevice(Constants.DEVICE_ID);
                    
            } catch (IotHubException iotf) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, iotf);
                    
            }
              
            
            // Display information about the
            // device you created.     
            System.out.println(Constants.DEVICE_ID);
            devicePrimaryKey = device.getPrimaryKey();
            deviceConnectionString = "HostName=CapstoneHub.azure-devices.net;DeviceId="+Constants.DEVICE_ID+";SharedAccessKey="+devicePrimaryKey;
        
        }
        catch (IOException | JsonSyntaxException | IllegalArgumentException | NoSuchAlgorithmException e) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, e);
        }
    }
        
        /*
        Use IoT Hub to upload a file asynchronously to Azure blob storage.
        */
        private static synchronized void uploadFile() throws FileNotFoundException, IOException   {
            File file = new File(Constants.IMAGE_FILE_PATH + File.separator + CommandExecutor.Image_File_Name);
            InputStream inputStream = new FileInputStream(file);
            long streamLength = file.length();

            client.uploadToBlobAsync(CommandExecutor.Image_File_Name, inputStream, streamLength, new App.FileUploadStatusCallBack(), null);
        }
        
    
    
    private static void Init_System() {
        
        try {
            MessageCallback callback = new AppMessageCallback();
            client = new DeviceClient(deviceConnectionString, Constants.PROTOCOL);
            client.setMessageCallback(callback, null);
            client.open();
            
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void main( String[] args ) throws IOException, URISyntaxException {
        App.getCredentials();
        App.Init_System();
        Utilities.StartDataScheduler();
        
    }
}
